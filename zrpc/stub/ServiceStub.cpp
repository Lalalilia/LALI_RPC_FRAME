//
// Created by lalalilia
//


#include <zrpc/stub/ServiceStub.h>

// 服务器存根生成头文件操作
std::string servicesStubTemplate(
        const std::string& macroName,
        const std::string& userClassName,
        const std::string& stubClassName,
        const std::string& serviceName,
        const std::string& stubProcedureBindings,
        const std::string& stubProcedureDefinitions
        ){
    std::string str =
            // 按照字面到源码转译，不再区分是否是转义符号
            R"(
/*
 * This stub is generated by zrpc, DO NOT modify it!
 */
#ifndef ZRPC_[macroName]_H
#define ZRPC_[macroName]_H

#include <jackson/Value.h>

#include <zrpc/util.h>
#include <zrpc/server/Rpcserver.h>
#include <zrpc/server/RpcService.h>

class [userClassName];

template <typename S>
class [stubClassName]
{
protected:
    explicit
    [stubClassName](RpcServer& server)
    {
        static_assert(std::is_same_v<S, [userClassName]>,
                      "derived class name should be '[userClassName]'");

        auto service = new RpcService;

        [stubProcedureBindings]

        server.addService("[serviceName]", service);
    }

    ~[stubClassName]() = default;

private:
    [stubProcedureDefinitions]

private:
    S& convert()
    {
        return static_cast<S&>(*this);
    }
};

#endif //ZRPC_[macroName]_H
)";
    replaceAll(str, "[macroName]", macroName);
    replaceAll(str, "[userClassName]", userClassName);
    replaceAll(str, "[stubClassName]", stubClassName);
    replaceAll(str, "[serviceName]", serviceName);
    replaceAll(str, "[stubProcedureBindings]", stubProcedureBindings);
    replaceAll(str, "[stubProcedureDefinitions]", stubProcedureDefinitions);
    return str;
}

// 存根程序链接服务器代码生成操作
std::string stubProcedureBindTemplate(
        const std::string& procedureName,
        const std::string& stubClassName,
        const std::string& stubProcedureName,
        const std::string& procedureParams)
{
    std::string str =
            R"(
service->addProcedureReturn("[procedureName]", new ProcedureReturn(
        std::bind(&[stubClassName]::[stubProcedureName], this, _1, _2)
        [procedureParams]
));
)";

    replaceAll(str, "[procedureName]", procedureName);
    replaceAll(str, "[stubClassName]", stubClassName);
    replaceAll(str, "[stubProcedureName]", stubProcedureName);
    replaceAll(str, "[procedureParams]", procedureParams);
    return str;
}



// 程序定义代码生成操作
std::string stubProcedureDefineTemplate(
        const std::string& paramsFromJsonArray,
        const std::string& paramsFromJsonObject,
        const std::string& stubProcedureName,
        const std::string& procedureName,
        const std::string& procedureArgs)
{
    std::string str =
            R"(void [stubProcedureName](json::Value& request, const RpcDoneCallback& done)
{
    auto& params = request["params"];

    if (params.isArray()) {
        [paramsFromJsonArray]
        convert().[procedureName]([procedureArgs] UserDoneCallback(request, done));
    }
    else {
        [paramsFromJsonObject]
        convert().[procedureName]([procedureArgs] UserDoneCallback(request, done));
    }
})";

    replaceAll(str, "[paramsFromJsonArray]", paramsFromJsonArray);
    replaceAll(str, "[paramsFromJsonObject]", paramsFromJsonObject);
    replaceAll(str, "[stubProcedureName]", stubProcedureName);
    replaceAll(str, "[procedureName]", procedureName);
    replaceAll(str, "[procedureArgs]", procedureArgs);
    return str;
}

// 程序缺省定义代码生成操作
std::string stubProcedureDefineTemplate(
        const std::string& stubProcedureName,
        const std::string& procedureName)
{
    std::string str =
            R"(
void [stubProcedureName](json::Value& request, const RpcDoneCallback& done)
{
    convert().[procedureName](UserDoneCallback(request, done));
}
)";

    replaceAll(str, "[stubProcedureName]", stubProcedureName);
    replaceAll(str, "[procedureName]", procedureName);
    return str;
}

std::string stubNotifyBindTemplate(
        const std::string& notifyName,
        const std::string& stubClassName,
        const std::string& stubNotifyName,
        const std::string& notifyParams)
{
    std::string str =
            R"(
service->addProcedureNotify("[notifyName]", new ProcedureNotify(
        std::bind(&[stubClassName]::[stubNotifyName], this, _1)
        [notifyParams]
));
)";

    replaceAll(str, "[notifyName]", notifyName);
    replaceAll(str, "[stubClassName]", stubClassName);
    replaceAll(str, "[stubNotifyName]", stubNotifyName);
    replaceAll(str, "[notifyParams]", notifyParams);
    return str;
}

// 处理多个参数情况
std::string stubNotifyDefineTemplate(
        const std::string& paramsFromJsonArray,
        const std::string& paramsFromJsonObject,
        const std::string& stubNotifyName,
        const std::string& notifyName,
        const std::string& notifyArgs)
{
    std::string str =
            R"(
void [stubNotifyName](json::Value& request)
{
    auto& params = request["params"];

    if (params.isArray()) {
        [paramsFromJsonArray]
        convert().[NotifyName]([notifyArgs]);
    }
    else {
        [paramsFromJsonObject]
        convert().[NotifyName]([notifyArgs]);
    }
}
)";

    replaceAll(str, "[notifyName]", notifyName);
    replaceAll(str, "[stubNotifyName]", stubNotifyName);
    replaceAll(str, "[notifyArgs]", notifyArgs);
    replaceAll(str, "[paramsFromJsonArray]", paramsFromJsonArray);
    replaceAll(str, "[paramsFromJsonObject]", paramsFromJsonObject);
    return str;
}

// 处理单个参数情况
std::string stubNotifyDefineTemplate(
        const std::string& stubNotifyName,
        const std::string& notifyName)
{
    std::string str =
            R"(
void [stubNotifyName](json::Value& request)
{
    convert().[notifyName]();
}
)";

    replaceAll(str, "[stubNotifyName]", stubNotifyName);
    replaceAll(str, "[notifyName]", notifyName);
    return str;
}


// 程序参数定义生成代码
std::string argsDefineTemplate(
        const std::string& arg,
        const std::string& index,
        json::ValueType type)
{
    std::string str = R"(auto [arg] = params[[index]][method];)";
    std::string method = [=](){
        switch (type) {
            case json::TYPE_BOOL:
                return ".getBool()";
            case json::TYPE_INT32:
                return ".getInt32()";
            case json::TYPE_INT64:
                return ".getInt64()";
            case json::TYPE_DOUBLE:
                return ".getDouble()";
            case json::TYPE_STRING:
                return ".getString()";
            case json::TYPE_OBJECT:
            case json::TYPE_ARRAY:
                return "";//todo
            default:
                assert(false && "bad value type");
                return "bad type";
        }
    }();
    replaceAll(str, "[arg]", arg);
    replaceAll(str, "[index]", index);
    replaceAll(str, "[method]", method);
    return str;
}

std::string ServiceStubGenerator::getStub() {
    auto macroName = getMacroName();
    auto userClassName = getUserClassName();
    auto stubClassName = getStubClassName();
    auto& serviceName = serviceInfo_.name;

    auto bindings = getStubProcedureBindings();
    bindings.append(getStubNotifyBindings());

    auto definitions = getStubProcedureDefinitions();
    definitions.append(getStubNotifyDefinitions());

    return servicesStubTemplate(
            macroName,
            userClassName,
            stubClassName,
            serviceName,
            bindings,
            definitions
            );
}

std::string ServiceStubGenerator::getMacroName() {
    std::string result = serviceInfo_.name;
    for(char& c:result)
        c = static_cast<char>(toupper(c));
    return result.append("SERVICESTUB");
}

std::string ServiceStubGenerator::getUserClassName(){
    return serviceInfo_.name + "Service";
}

std::string ServiceStubGenerator::getStubClassName(){
    return serviceInfo_.name + "ServiceStub";
}

std::string ServiceStubGenerator::getStubProcedureBindings(){
    std::string result;
    for (auto& p: serviceInfo_.rpcReturn) {
        auto procedureName = p.name;
        auto stubClassName = getStubClassName();
        auto stubProcedureName = getStubGenericName(p);
        auto procedureParams = getGenericParams(p);

        auto binding = stubProcedureBindTemplate(
                procedureName,
                stubClassName,
                stubProcedureName,
                procedureParams);
        result.append(binding);
        result.append("\n");
    }
    return result;
}


std::string ServiceStubGenerator::getStubProcedureDefinitions(){
    std::string result;
    for (auto& r: serviceInfo_.rpcReturn) {
        auto procedureName = r.name;
        auto stubProcedureName = getStubGenericName(r);

        if (r.params.getSize() > 0) {
            auto paramsFromJsonArray = getParamsFromJsonArray(r);
            auto paramsFromJsonObject = getParamsFromJsonObject(r);
            auto procedureArgs = getGenericArgs(r);
            auto define = stubProcedureDefineTemplate(
                    paramsFromJsonArray,
                    paramsFromJsonObject,
                    stubProcedureName,
                    procedureName,
                    procedureArgs);

            result.append(define);
            result.append("\n");
        }
        else {
            auto define = stubProcedureDefineTemplate(
                    stubProcedureName,
                    procedureName);

            result.append(define);
            result.append("\n");
        }
    }
    return result;
}


std::string ServiceStubGenerator::getStubNotifyBindings(){
    std::string result;
    for (auto& p: serviceInfo_.rpcNotify) {
        auto notifyName = p.name;
        auto stubClassName = getStubClassName();
        auto stubNotifyName = getStubGenericName(p);
        auto notifyParams = getGenericParams(p);

        auto binding = stubNotifyBindTemplate(
                notifyName,
                stubClassName,
                stubNotifyName,
                notifyParams);
        result.append(binding);
        result.append("\n");
    }
    return result;
}

std::string ServiceStubGenerator::getStubNotifyDefinitions()
{
    std::string result;
    for (auto& r: serviceInfo_.rpcNotify) {
        auto notifyName = r.name;
        auto stubNotifyName = getStubGenericName(r);

        if (r.params.getSize() > 0) {
            auto paramsFromJsonArray = getParamsFromJsonArray(r);
            auto paramsFromJsonObject = getParamsFromJsonObject(r);
            auto notifyArgs = getGenericArgs(r);
            auto define = stubNotifyDefineTemplate(
                    paramsFromJsonArray,
                    paramsFromJsonObject,
                    stubNotifyName,
                    notifyName,
                    notifyArgs);

            result.append(define);
            result.append("\n");
        }
        else {
            auto define = stubNotifyDefineTemplate(
                    stubNotifyName,
                    notifyName);

            result.append(define);
            result.append("\n");
        }
    }
    return result;
}


template <typename Rpc>
std::string ServiceStubGenerator::getStubGenericName(const Rpc& r)
{
    return r.name + "Stub";
}


template <typename Rpc>
std::string ServiceStubGenerator::getGenericParams(const Rpc& r)
{
    std::string result;

    for (auto& m: r.params.getObject()) {
        std::string field = "\"" + m.key.getString() + "\"";
        std::string type = [&]() {
            switch (m.value.getType()) {
                case json::TYPE_BOOL:
                    return "json::TYPE_BOOL";
                case json::TYPE_INT32:
                    return "json::TYPE_INT32";
                case json::TYPE_INT64:
                    return "json::TYPE_INT64";
                case json::TYPE_DOUBLE:
                    return "json::TYPE_DOUBLE";
                case json::TYPE_STRING:
                    return "json::TYPE_STRING";
                case json::TYPE_OBJECT:
                    return "json::TYPE_OBJECT";
                case json::TYPE_ARRAY:
                    return "json::TYPE_ARRAY";
                default:
                    assert(false && "bad value type");
                    return "bad type";
            };
        }();
        result.append(", \n").append(field);
        result.append(", ").append(type);
    }
    return result;
}


template <typename Rpc>
std::string ServiceStubGenerator::getGenericArgs(const Rpc& r)
{
    std::string result;
    for (auto& m: r.params.getObject()) {
        auto arg = m.key.getString();
        result.append(arg);
        result.append(", ");
    }
    return result;
}

template <typename Rpc>
std::string ServiceStubGenerator::getParamsFromJsonArray(const Rpc& r)
{
    std::string result;
    int index = 0;
    for (auto& m: r.params.getObject()) {
        std::string line = argsDefineTemplate(
                m.key.getString(),
                std::to_string(index),
                m.value.getType());
        index++;
        result.append(line);
        result.append("\n");
    }
    return result;
}

template <typename Rpc>
std::string ServiceStubGenerator::getParamsFromJsonObject(const Rpc& r)
{
    std::string result;
    for (auto& m: r.params.getObject()) {
        std::string index = "\"" + m.key.getString() + "\"";
        std::string line = argsDefineTemplate(
                m.key.getString(),
                index,
                m.value.getType());
        result.append(line);
        result.append("\n");
    }
    return result;
}
