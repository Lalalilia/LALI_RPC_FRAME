
/*
 * This stub is generated by zrpc, DO NOT modify it!
 */
#ifndef ZRPC_ARITHMETICSERVICESTUB_H
#define ZRPC_ARITHMETICSERVICESTUB_H

#include <jackson/Value.h>

#include <zrpc/server/RpcService.h>
#include <zrpc/server/Rpcserver.h>
#include <zrpc/util.h>

class ArithmeticService;

template <typename S> class ArithmeticServiceStub {
protected:
  explicit ArithmeticServiceStub(RpcServer &server) {
    static_assert(std::is_same_v<S, ArithmeticService>,
                  "derived class name should be 'ArithmeticService'");

    auto service = new RpcService;

    service->addProcedureReturn(
        "Add", new ProcedureReturn(
                   std::bind(&ArithmeticServiceStub::AddStub, this, _1, _2),
                   "lhs", json::TYPE_DOUBLE, "rhs", json::TYPE_DOUBLE));

    service->addProcedureReturn(
        "Sub", new ProcedureReturn(
                   std::bind(&ArithmeticServiceStub::SubStub, this, _1, _2),
                   "lhs", json::TYPE_DOUBLE, "rhs", json::TYPE_DOUBLE));

    server.addService("Arithmetic", service);
  }

  ~ArithmeticServiceStub() = default;

private:
  void AddStub(json::Value &request, const RpcDoneCallback &done) {
    auto &params = request["params"];

    if (params.isArray()) {
      auto lhs = params[0].getDouble();
      auto rhs = params[1].getDouble();

      convert().Add(lhs, rhs, UserDoneCallback(request, done));
    } else {
      auto lhs = params["lhs"].getDouble();
      auto rhs = params["rhs"].getDouble();

      convert().Add(lhs, rhs, UserDoneCallback(request, done));
    }
  }
  void SubStub(json::Value &request, const RpcDoneCallback &done) {
    auto &params = request["params"];

    if (params.isArray()) {
      auto lhs = params[0].getDouble();
      auto rhs = params[1].getDouble();

      convert().Sub(lhs, rhs, UserDoneCallback(request, done));
    } else {
      auto lhs = params["lhs"].getDouble();
      auto rhs = params["rhs"].getDouble();

      convert().Sub(lhs, rhs, UserDoneCallback(request, done));
    }
  }

private:
  S &convert() { return static_cast<S &>(*this); }
};

#endif // ZRPC_ARITHMETICSERVICESTUB_H
