
/*
 * This stub is generated by zrpc, DO NOT modify it!
 */
#ifndef ZRPC_RPCTESTSERVICESTUB_H
#define ZRPC_RPCTESTSERVICESTUB_H

#include <jackson/Value.h>

#include <zrpc/util.h>
#include <zrpc/server/Rpcserver.h>
#include <zrpc/server/RpcService.h>

class RpcTestService;

template <typename S>
class RpcTestServiceStub
{
protected:
    explicit
    RpcTestServiceStub(RpcServer& server)
    {
        static_assert(std::is_same_v<S, RpcTestService>,
                      "derived class name should be 'RpcTestService'");

        auto service = new RpcService;

        
service->addProcedureReturn("Add", new ProcedureReturn(
        std::bind(&RpcTestServiceStub::AddStub, this, _1, _2)
        , 
"lhs", json::TYPE_DOUBLE, 
"rhs", json::TYPE_DOUBLE
));


service->addProcedureReturn("Sub", new ProcedureReturn(
        std::bind(&RpcTestServiceStub::SubStub, this, _1, _2)
        , 
"lhs", json::TYPE_DOUBLE, 
"rhs", json::TYPE_DOUBLE
));



        server.addService("RpcTest", service);
    }

    ~RpcTestServiceStub() = default;

private:
    void AddStub(json::Value& request, const RpcDoneCallback& done)
{
    auto& params = request["params"];

    if (params.isArray()) {
        auto lhs = params[0].getDouble();
auto rhs = params[1].getDouble();

        convert().Add(lhs, rhs,  UserDoneCallback(request, done));
    }
    else {
        auto lhs = params["lhs"].getDouble();
auto rhs = params["rhs"].getDouble();

        convert().Add(lhs, rhs,  UserDoneCallback(request, done));
    }
}
void SubStub(json::Value& request, const RpcDoneCallback& done)
{
    auto& params = request["params"];

    if (params.isArray()) {
        auto lhs = params[0].getDouble();
auto rhs = params[1].getDouble();

        convert().Sub(lhs, rhs,  UserDoneCallback(request, done));
    }
    else {
        auto lhs = params["lhs"].getDouble();
auto rhs = params["rhs"].getDouble();

        convert().Sub(lhs, rhs,  UserDoneCallback(request, done));
    }
}


private:
    S& convert()
    {
        return static_cast<S&>(*this);
    }
};

#endif //ZRPC_RPCTESTSERVICESTUB_H
